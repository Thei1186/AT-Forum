rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function userHasRole(role) {
        return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.roleName == role;
        }

        function userExists() {
            return exists(/databases/$(database)/documents/users/$(request.auth.uid));
            }

    // Allows super admin to read or write to any document
        match /{document=**} {
          allow read, write: if request.auth != null && (userHasRole('superAdmin'))
        }

        match /categories/{uId} {
                allow read: if true;
                allow create: if request.auth != null && (userHasRole('admin'));
                allow delete: if request.auth != null && (userHasRole('admin'));
                allow update: if request.auth != null && (userHasRole('admin'));
              }

        match /topics/{uId} {
                allow read: if true;
                allow create: if request.auth != null;
                allow delete: if request.auth != null && (userHasRole('admin'));
                allow update: if request.auth != null && (userHasRole('admin') || request.auth != null
                 && request.resource.author.uid == request.auth.uid);
              }

        match /users/{uId} {
                        allow read: if request.auth != null;
                        allow create: if request.auth != null && (userHasRole('admin'));
                        allow delete: if request.auth != null && (userHasRole('admin'));
                        allow update: if request.auth != null && (userHasRole('admin'));
                      }

        match /comments/{uId} {
                                allow read: if true;
                                allow create: if request.auth != null && userExists();
                                allow delete: if request.auth != null && userExists() &&
                                resource.data.author.uid == request.auth.uid
                                 || request.auth != null && (userHasRole('admin'));
                                allow update: if request.auth != null && userExists() && request.resource.author.uid == request.auth.uid;
                              }

                        match /favoriteTopics/{uId} {
                                               allow read: if request.auth != null && userExists() &&
                                               uId == request.auth.uid;
                                               allow write: if request.auth != null && userExists() &&
                                               uId == request.auth.uid;
                                                }
  }
}
